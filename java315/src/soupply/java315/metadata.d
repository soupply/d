/*
 * This file has been automatically generated by Soupply and released under the MIT license.
 * Generated from java315
 */
module soupply.java315.metadata;

import packetmaker;
import packetmaker.maker : EndianType, writeLength;
import packetmaker.memory : malloc, realloc, alloc, free;

import soupply.util : Vector;

import soupply.java315.packet : Java315Packet;
static import soupply.java315.types;

enum MetadataType : ubyte
{
    BYTE = 0,
    INT = 1,
    FLOAT = 2,
    STRING = 3,
    CHAT = 4,
    SLOT = 5,
    BOOL = 6,
    ROTATION = 7,
    POSITION = 8,
    OPTIONAL_POSITION = 9,
    DIRECTION = 10,
    UUID = 11,
    BLOCK = 12,
}

class MetadataValue : Java315Packet
{

    ubyte id;
    ubyte type;

    this(ubyte id, ubyte type) pure nothrow @safe @nogc
    {
        this.id = id;
        this.type = type;
    }

    mixin Make;

}

class MetadataValue0 : MetadataValue
{

    byte value;

    this(ubyte id, byte value) pure nothrow @safe @nogc
    {
        super(id, 0);
        this.value = value;
    }

    mixin Make;

}

class MetadataValue1 : MetadataValue
{

    @Var uint value;

    this(ubyte id, uint value) pure nothrow @safe @nogc
    {
        super(id, 1);
        this.value = value;
    }

    mixin Make;

}

class MetadataValue2 : MetadataValue
{

    float value;

    this(ubyte id, float value) pure nothrow @safe @nogc
    {
        super(id, 2);
        this.value = value;
    }

    mixin Make;

}

class MetadataValue3 : MetadataValue
{

    string value;

    this(ubyte id, string value) pure nothrow @safe @nogc
    {
        super(id, 3);
        this.value = value;
    }

    mixin Make;

}

class MetadataValue4 : MetadataValue
{

    string value;

    this(ubyte id, string value) pure nothrow @safe @nogc
    {
        super(id, 4);
        this.value = value;
    }

    mixin Make;

}

class MetadataValue5 : MetadataValue
{

    soupply.java315.types.Slot value;

    this(ubyte id, soupply.java315.types.Slot value) pure nothrow @safe @nogc
    {
        super(id, 5);
        this.value = value;
    }

    mixin Make;

}

class MetadataValue6 : MetadataValue
{

    bool value;

    this(ubyte id, bool value) pure nothrow @safe @nogc
    {
        super(id, 6);
        this.value = value;
    }

    mixin Make;

}

class MetadataValue7 : MetadataValue
{

    Vector!(float, "xyz") value;

    this(ubyte id, Vector!(float, "xyz") value) pure nothrow @safe @nogc
    {
        super(id, 7);
        this.value = value;
    }

    mixin Make;

}

class MetadataValue8 : MetadataValue
{

    ulong value;

    this(ubyte id, ulong value) pure nothrow @safe @nogc
    {
        super(id, 8);
        this.value = value;
    }

    mixin Make;

}

class MetadataValue9 : MetadataValue
{

    soupply.java315.types.OptionalPosition value;

    this(ubyte id, soupply.java315.types.OptionalPosition value) pure nothrow @safe @nogc
    {
        super(id, 9);
        this.value = value;
    }

    mixin Make;

}

class MetadataValue10 : MetadataValue
{

    @Var uint value;

    this(ubyte id, uint value) pure nothrow @safe @nogc
    {
        super(id, 10);
        this.value = value;
    }

    mixin Make;

}

class MetadataValue11 : MetadataValue
{

    soupply.java315.types.OptionalUuid value;

    this(ubyte id, soupply.java315.types.OptionalUuid value) pure nothrow @safe @nogc
    {
        super(id, 11);
        this.value = value;
    }

    mixin Make;

}

class MetadataValue12 : MetadataValue
{

    @Var uint value;

    this(ubyte id, uint value) pure nothrow @safe @nogc
    {
        super(id, 12);
        this.value = value;
    }

    mixin Make;

}

struct Metadata
{

    private MetadataValue[ubyte] _store;
    void encodeBody(InputBuffer buffer) @nogc
    {
        InputBuffer _buffer = alloc!InputBuffer();
        scope(exit) free(_buffer);
        foreach(value ; _store) value.encodeBody(_buffer);
        _buffer.writeUnsignedByte(ubyte(255));
        buffer.writeBytes(_buffer.data);
    }

    void decodeBody(OutputBuffer buffer)
    {
        assert(0, `Cannot decode Metadata`);
    }

}
