/*
 * This file has been automatically generated by Soupply and released under the MIT license.
 * Generated from data/test0.xml
 */
module soupply.test0.protocol.test;

static import std.conv;
import std.typetuple : TypeTuple;
import packetmaker;

import soupply.util : Vector, UUID;
import soupply.test0.metadata : Metadata;
import soupply.test0.packet : Test0Packet;

static import soupply.test0.types;

alias Packets = TypeTuple!(Test0);

class Test0 : Test0Packet
{

    enum ubyte ID = 0;

    enum bool CLIENTBOUND = false;
    enum bool SERVERBOUND = false;

    enum string[] __fields = ["a", "b", "c", "d", "e"];

    byte a;
    ushort b;
    @LittleEndian long c;
    @Var short d;
    @Var uint e;

    this() pure nothrow @safe @nogc {}

    this(byte a, ushort b=ushort.init, long c=long.init, short d=short.init, uint e=uint.init) pure nothrow @safe @nogc
    {
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.e = e;
    }

    mixin Make;

    public static typeof(this) fromBuffer(ubyte[] buffer)
    {
        Test0 ret = new Test0();
        ret.decode(buffer);
        return ret;
    }

    override string toString()
    {
        return "Test0(a: " ~ std.conv.to!string(this.a) ~ ", b: " ~ std.conv.to!string(this.b) ~ ", c: " ~ std.conv.to!string(this.c) ~ ", d: " ~ std.conv.to!string(this.d) ~ ", e: " ~ std.conv.to!string(this.e) ~ ")";
    }

    unittest
    {

        import std.conv : to;

        Test0 packet = new Test0();

        packet.d = 10;
        packet.e = 500;
        packet.b = 300;
        packet.c = 1;
        packet.a = -10;
        auto result = packet.autoEncode();
        assert(result == [0, 246, 1, 44, 1, 0, 0, 0, 0, 0, 0, 0, 20, 244, 3], "test0.test.test-0 expected [0, 246, 1, 44, 1, 0, 0, 0, 0, 0, 0, 0, 20, 244, 3] but got " ~ result.to!string);

        packet.decode([0, 246, 1, 44, 1, 0, 0, 0, 0, 0, 0, 0, 20, 244, 3]);
        assert(packet.d == 10, "test0.test.test-0.d expected 10 but got " ~ packet.d.to!string);
        assert(packet.e == 500, "test0.test.test-0.e expected 500 but got " ~ packet.e.to!string);
        assert(packet.b == 300, "test0.test.test-0.b expected 300 but got " ~ packet.b.to!string);
        assert(packet.c == 1, "test0.test.test-0.c expected 1 but got " ~ packet.c.to!string);
        assert(packet.a == -10, "test0.test.test-0.a expected -10 but got " ~ packet.a.to!string);

    }

}
